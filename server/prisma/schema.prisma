// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  hash       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

  @@map("users")
}

model Customer {
  id                         String                       @id @default(auto()) @map("_id") @db.ObjectId
  mobile                     String                       @unique
  other_mobile               Json?
  email                      String?
  other_email                Json?
  source                     Int
  profiling                  Json?
  keys                       String[]                     @default([])
  profile_completion         Int?
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  created_by                 String?
  updated_by                 String?
  personal_details           Personal_Details?
  keywordIDs                 String[]                     @db.ObjectId
  keywords                   Keyword[]                    @relation(fields: [keywordIDs], references: [id])
  OccupationCustomerMappings OccupationCustomerMapping[]
  VehicleCustomerMappings    VehicleCustomerMapping[]
  questionsIDs               String[]                     @db.ObjectId
  questions                  Question[]                   @relation(fields: [questionsIDs], references: [id])
  ProfileTypeCustomerMapping ProfileTypeCustomerMapping[]

  @@map("customers")
}

model Personal_Details {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  customer      Customer @relation(fields: [customer_id], references: [id])
  customer_id   String   @unique @db.ObjectId
  full_name     String?
  address       String?
  phone_number  String?
  email_address String?
  date_of_birth String?
  employment    String?
  location      String?
  anniversary   String?
}

model Keyword {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  category       String
  value          String
  level          String
  customerIDs    String[]      @db.ObjectId
  customers      Customer[]    @relation(fields: [customerIDs], references: [id])
  questionIDs    String[]      @db.ObjectId
  questions      Question[]    @relation(fields: [questionIDs], references: [id])
  profileTypeIDs String[]      @db.ObjectId
  profile_types  ProfileType[] @relation(fields: [profileTypeIDs], references: [id])

  @@map("keywords")
}

model Occupation {
  id        String                      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  industry  String
  customers OccupationCustomerMapping[]

  @@map("occupations")
}

model OccupationCustomerMapping {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  occupation    Occupation @relation(fields: [occupationId], references: [id])
  occupationId  String     @db.ObjectId
  customerId    String     @db.ObjectId
  customer      Customer   @relation(fields: [customerId], references: [id])
  incomeBracket String
  from          DateTime
  to            DateTime

  @@map("occupation_customer_mapping")
}

model Vehicle {
  id          String                   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  productType String
  customers   VehicleCustomerMapping[]

  @@map("vehicles")
}

model VehicleCustomerMapping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String   @db.ObjectId
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  vin        String
  validity   String
  expiryDate DateTime
  status     String

  @@map("vehicle_customer_mapping")
}

model Question {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  options        String[]
  customerIDs    String[]      @db.ObjectId
  customers      Customer[]    @relation(fields: [customerIDs], references: [id])
  keywordIDs     String[]      @db.ObjectId
  keywords       Keyword[]     @relation(fields: [keywordIDs], references: [id])
  profileTypeIDs String[]      @db.ObjectId
  profile_types  ProfileType[] @relation(fields: [profileTypeIDs], references: [id])

  @@map("questions")
}

model ProfileType {
  id           String                       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  category     String
  description  String
  questionsIDs String[]                     @db.ObjectId
  questions    Question[]                   @relation(fields: [questionsIDs], references: [id])
  keywordIDs   String[]                     @db.ObjectId
  keywords     Keyword[]                    @relation(fields: [keywordIDs], references: [id])
  customers    ProfileTypeCustomerMapping[]
  serviceIDs   String[]                     @db.ObjectId
  services     Services[]                   @relation(fields: [serviceIDs], references: [id])

  @@map("profile_types")
}

model ProfileTypeCustomerMapping {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  profileType   ProfileType @relation(fields: [profileTypeId], references: [id])
  profileTypeId String      @db.ObjectId
  customerId    String      @db.ObjectId
  customer      Customer    @relation(fields: [customerId], references: [id])
  level         Int         @default(0)

  @@map("profile_type_customer_mapping")
}

model Services {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  profileTypeIDs String[]      @db.ObjectId
  profile_types  ProfileType[] @relation(fields: [profileTypeIDs], references: [id])

  @@map("services")
}
