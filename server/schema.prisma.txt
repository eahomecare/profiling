// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  fullname                  String?
  agentID                   String?                     @unique
  agentJWT                  String?                     @unique
  agentCRM                  String[]
  agentName                 String?
  email                     String                      @unique
  mobile                    String?                     @unique
  hash                      String
  created_at                DateTime                    @default(now())
  userRolePermissionMapping userRolePermissionMapping[]
  updated_at                DateTime                    @updatedAt
  created_by                String?
  updated_by                String?
  // UserAgentSessionMapping   UserAgentSessionMapping[]
  roleId                    String                      @db.ObjectId
  role                      Role                        @relation(fields: [roleId], references: [id])
  agentSubmits              agentSubmits[]
  AgentSession              AgentSession[]
  isActive                  Boolean                     @default(true)
  previousHashes            String[]                    @default([])

  @@map("users")
}

model Customer {
  id                          String                        @id @default(auto()) @map("_id") @db.ObjectId
  crmMappings                 CustomerCRMMapping[]
  mobile                      String?                       @unique
  other_mobile                Json?
  email                       String?
  other_email                 Json?
  source                      String
  profiling                   Json?
  keys                        String[]                      @default([])
  profile_completion          Int?
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @updatedAt
  created_by                  String?
  updated_by                  String?
  personal_details            Personal_Details?
  keywordIDs                  String[]                      @db.ObjectId
  keywords                    Keyword[]                     @relation(fields: [keywordIDs], references: [id])
  OccupationCustomerMappings  OccupationCustomerMapping[]
  VehicleCustomerMappings     VehicleCustomerMapping[]
  questionsIDs                String[]                      @db.ObjectId
  questions                   Question[]                    @relation(fields: [questionsIDs], references: [id])
  ProfileTypeCustomerMapping  ProfileTypeCustomerMapping[]
  ServiceCustomerUsageMapping ServiceCustomerUsageMapping[]
  agentSubmits                agentSubmits[]
  campaignIDs                 String[]                      @db.ObjectId
  campaign                    Campaign[]                    @relation(fields: [campaignIDs], references: [id])
  CustomerHomecareMapping     CustomerHomecareMapping[]
  CustomerSession             CustomerSession[]

  @@map("customers")
}

model Personal_Details { // These personal details are related to customer
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  customer      Customer  @relation(fields: [customer_id], references: [id])
  customer_id   String    @unique @db.ObjectId
  full_name     String?
  address       String?
  phone_number  String?
  email_address String?
  date_of_birth DateTime?
  employment    String?
  location      String?
  anniversary   String?
  gender        String?
}

model Keyword {
  id             String                       @id @default(auto()) @map("_id") @db.ObjectId
  category       String
  value          String
  level          Int?
  customerIDs    String[]                     @db.ObjectId
  customers      Customer[]                   @relation(fields: [customerIDs], references: [id])
  questionIDs    String[]                     @db.ObjectId
  questions      Question[]                   @relation(fields: [questionIDs], references: [id])
  profileTypeIDs String[]                     @db.ObjectId
  profile_types  ProfileType[]                @relation(fields: [profileTypeIDs], references: [id])
  // created_at     DateTime      @default(now())
  // updated_at     DateTime      @updatedAt
  agentSubmits   AgentSubmitKeywordsMapping[]

  @@unique([value, category])
  @@map("keywords")
}

model Occupation {
  id        String                      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  industry  String
  customers OccupationCustomerMapping[]
  // created_at DateTime                    @default(now())
  // updated_at DateTime                    @updatedAt

  @@map("occupations")
}

model OccupationCustomerMapping {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  occupation    Occupation @relation(fields: [occupationId], references: [id])
  occupationId  String     @db.ObjectId
  customerId    String     @db.ObjectId
  customer      Customer   @relation(fields: [customerId], references: [id])
  incomeBracket String
  from          DateTime
  to            DateTime

  @@map("occupation_customer_mapping")
}

model Vehicle {
  id          String                   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  productType String
  customers   VehicleCustomerMapping[]
  // created_at  DateTime                 @default(now())
  // updated_at  DateTime                 @updatedAt

  @@map("vehicles")
}

model VehicleCustomerMapping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId  String   @db.ObjectId
  customerId String   @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  vin        String
  validity   String
  expiryDate DateTime
  status     String

  @@map("vehicle_customer_mapping")
}

model Question {
  id             String                        @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  category       String
  level          Int
  type           String
  options        String[]
  customerIDs    String[]                      @db.ObjectId
  customers      Customer[]                    @relation(fields: [customerIDs], references: [id])
  keywordIDs     String[]                      @db.ObjectId
  keywords       Keyword[]                     @relation(fields: [keywordIDs], references: [id])
  profileTypeIDs String[]                      @db.ObjectId
  profile_types  ProfileType[]                 @relation(fields: [profileTypeIDs], references: [id])
  // created_at     DateTime      @default(now())
  // updated_at     DateTime      @updatedAt
  agentSubmits   AgentSubmitQuestionsMapping[]

  @@unique([question])
  @@map("questions")
}

model ProfileType {
  id           String                       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  category     String
  srcUrl       String?
  description  String?
  questionsIDs String[]                     @db.ObjectId
  questions    Question[]                   @relation(fields: [questionsIDs], references: [id])
  keywordIDs   String[]                     @db.ObjectId
  keywords     Keyword[]                    @relation(fields: [keywordIDs], references: [id])
  customers    ProfileTypeCustomerMapping[]
  serviceIDs   String[]                     @db.ObjectId
  services     Service[]                    @relation(fields: [serviceIDs], references: [id])
  // created_at   DateTime                     @default(now())
  // updated_at   DateTime                     @updatedAt

  @@unique([name])
  @@map("profile_types")
}

model ProfileTypeCustomerMapping {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  profileType   ProfileType @relation(fields: [profileTypeId], references: [id])
  profileTypeId String      @db.ObjectId
  customerId    String      @db.ObjectId
  customer      Customer    @relation(fields: [customerId], references: [id])
  level         Int         @default(1)

  @@map("profile_type_customer_mapping")
}

model Service {
  id                          String                        @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  subType                     String
  description                 String?
  profileTypeIDs              String[]                      @db.ObjectId
  profile_types               ProfileType[]                 @relation(fields: [profileTypeIDs], references: [id])
  ServiceCustomerUsageMapping ServiceCustomerUsageMapping[]
  // created_at                  DateTime                      @default(now())
  // updated_at                  DateTime                      @updatedAt

  @@unique([name])
  @@map("services")
}

model ServiceCustomerUsageMapping {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  service           Service  @relation(fields: [serviceId], references: [id])
  serviceId         String   @db.ObjectId
  customerId        String   @db.ObjectId
  customer          Customer @relation(fields: [customerId], references: [id])
  ticket_id         String
  order_id          String
  source_of_booking String
  ticket_type       String
  ticket_date       String
  action            String
  action_date_time  String
  tat               Int

  @@map("service_customer_usage_mappings")
}

model Role {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                      RoleNames
  defaultPermissionsIDs     String[]                    @db.ObjectId
  defaultPermissions        Permission[]                @relation(fields: [defaultPermissionsIDs], references: [id])
  userRolePermissionMapping userRolePermissionMapping[]
  users                     User[]
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt

  @@unique([name])
}

enum RoleNames {
  admin
  agent
  campaign_manager
  team_lead
}

enum PermissionNames {
  customer_dashboard
  profile_dashboard
  campaign_dashoard
  user_create
  user_view
  user_read
  user_delete
  user_edit
  customer_details
  acl
  keywords_view
  keywords_edit
}

model Permission {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                      PermissionNames
  defaultRolesIDs           String[]                    @db.ObjectId
  defaultRoles              Role[]                      @relation(fields: [defaultRolesIDs], references: [id])
  userRolePermissionMapping userRolePermissionMapping[]
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
}

model userRolePermissionMapping {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String     @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String     @db.ObjectId
  permission   Permission @relation(fields: [permissionId], references: [id])
  userId       String     @db.ObjectId
  isActive     Boolean    @default(true)
  user         User       @relation(fields: [userId], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@unique([userId, roleId, permissionId])
}

// model AgentSession {
//   id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
//   CRM                     String
//   authorizationToken      String                    @unique
//   userAgentSessionMapping UserAgentSessionMapping[]
//   created_at              DateTime                  @default(now())
//   updated_at              DateTime                  @updatedAt

//   @@map("agentSessions")
// }

// model UserAgentSessionMapping {
//   id         String       @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String       @db.ObjectId
//   user       User         @relation(fields: [userId], references: [id])
//   sessionId  String       @unique @db.ObjectId
//   session    AgentSession @relation(fields: [sessionId], references: [id])
//   created_at DateTime     @default(now())
//   updated_at DateTime     @updatedAt

//   @@map("userAgentSessionMappings")
// }

model AgentSession {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  CRM                String
  authorizationToken String   @unique
  userId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@map("agentSessions")
}

model agentSubmits {
  id         String                        @id @default(auto()) @map("_id") @db.ObjectId
  CRM        String
  customerID String                        @db.ObjectId
  customer   Customer                      @relation(fields: [customerID], references: [id])
  agentID    String
  agent      User                          @relation(fields: [agentID], references: [agentID])
  remarks    String?
  keywords   AgentSubmitKeywordsMapping[]
  questions  AgentSubmitQuestionsMapping[]
  created_at DateTime?                     @default(now())
  updated_at DateTime?                     @updatedAt

  @@map("agentSubmits")
}

model Campaign {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  eventBased     Boolean         @default(false)
  triggerTime    String
  start          DateTime
  end            DateTime
  isActive       Boolean         @default(true)
  type           CampaignType
  recurrenceType RecurrenceType
  customerIDs    String[]        @db.ObjectId
  customers      Customer[]      @relation(fields: [customerIDs], references: [id])
  createdBy      String?         @db.ObjectId
  updatedBy      String?         @db.ObjectId
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  eventIDs       String[]        @db.ObjectId
  events         Event[]         @relation(fields: [eventIDs], references: [id])
  template       Template?       @relation(fields: [templateId], references: [id])
  templateId     String?         @db.ObjectId
  campaignReport CampaignReport?
}

enum CampaignType {
  WHATSAPP
  SMS
  EMAIL
  NOTIFICATION
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONHTLY
  ANNUALLY
  CUSTOM
}

model Template {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  campaigns  Campaign[]
  name       String
  type       String
  content    String
  createdBy  String?    @db.ObjectId
  updatedBy  String?    @db.ObjectId
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Event {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  campaignIDs String[]   @db.ObjectId
  campaigns   Campaign[] @relation(fields: [campaignIDs], references: [id])
  name        String
  type        String
  isActive    Boolean    @default(true)
  start       DateTime
  end         DateTime
  createdBy   String?    @db.ObjectId
  updatedBy   String?    @db.ObjectId
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model CampaignReport {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  campaign         Campaign @relation(fields: [campaign_id], references: [id])
  campaign_id      String   @unique @db.ObjectId
  emailLogs        Json[]
  whatsappLogs     Json[]
  notificationLogs Json[]
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model AgentSubmitKeywordsMapping {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  agentSubmitId String       @map("agent_submit_id") @db.ObjectId
  keywordId     String       @map("keyword_id") @db.ObjectId
  agentSubmit   agentSubmits @relation(fields: [agentSubmitId], references: [id])
  keyword       Keyword      @relation(fields: [keywordId], references: [id])

  @@unique([agentSubmitId, keywordId])
  @@map("agentSubmitKeywordsMapping")
}

model AgentSubmitQuestionsMapping {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  agentSubmitId String       @map("agent_submit_id") @db.ObjectId
  questionId    String       @map("question_id") @db.ObjectId
  agentSubmit   agentSubmits @relation(fields: [agentSubmitId], references: [id])
  question      Question     @relation(fields: [questionId], references: [id])

  @@unique([agentSubmitId, questionId])
  @@map("agentSubmitQuestionsMapping")
}

model CustomerCRMMapping {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  customerCrmId String
  crmName       String
  customerId    String   @db.ObjectId
  customer      Customer @relation(fields: [customerId], references: [id])
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([customerCrmId, crmName])
  @@map("customer_crm_mappings")
}

model CustomerHomecareMapping {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  master_customer_id   String           @db.ObjectId
  wp_user_id           Int
  homecare_customer_id String           @db.ObjectId
  customer             Customer         @relation(fields: [master_customer_id], references: [id])
  customer_homecare    CustomerHomecare @relation(fields: [homecare_customer_id], references: [id])

  @@unique([wp_user_id])
  @@map("customer_homecare_mappings")
}

model PersonalDetailsHomecare {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  customer_id     String            @unique @db.ObjectId
  customer        CustomerHomecare? @relation(fields: [customer_id], references: [id])
  ccode           String?
  country         String?
  fname           String?
  lname           String?
  gender          String?
  location        String?
  email           String?
  mobile          String?
  memberBenefitId String?
  planId          String?
  clientId        String?
  programId       String?
  regCode         String?
}

model CustomerHomecare {
  id                             String                    @id @default(auto()) @map("_id") @db.ObjectId
  personalDetails                PersonalDetailsHomecare?
  socketId                       String?
  cyberior_customer_id           String?
  homecare_post_id               String?
  cyberior_activation_status     String?
  cyberior_id                    String?
  cyberior_user_id               String?
  cyberior_activation_date       String?
  registrationVerificationStatus String?
  wp_user_id                     Int
  customer_id                    String?
  createdAt                      DateTime                  @default(now())
  updatedAt                      DateTime                  @updatedAt
  CustomerHomecareMapping        CustomerHomecareMapping[]

  @@unique([wp_user_id])
}

model CustomerSession {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId      String   @unique
  questionStates Json
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([customerId])
  @@map("customer_sessions")
}
